name: Windows RDP via ngrok

on:
  workflow_dispatch:
    inputs:
      duration:
        description: 'Duration in minutes'
        required: false
        default: '360'
        type: string
  # Trigger temporaire pour faire apparaître le workflow - à supprimer après
  push:
    branches: [ main ]
    paths: [ '.github/workflows/rdp-setup.yml' ]

jobs:
  build:
    runs-on: windows-latest
    timeout-minutes: 9999

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download ngrok
      run: |
        Invoke-WebRequest -Uri "https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-windows-amd64.zip" -OutFile "ngrok.zip"
        Expand-Archive -Path "ngrok.zip" -DestinationPath "." -Force
        Remove-Item "ngrok.zip"

    - name: Setup ngrok auth
      run: |
        .\ngrok.exe config add-authtoken ${{ secrets.NGROK_AUTH_TOKEN }}

    - name: Enable RDP
      run: |
        # Activer le Remote Desktop
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -name "fDenyTSConnections" -Value 0
        
        # Activer RDP à travers le firewall
        Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
        
        # Configurer l'authentification au niveau du réseau (optionnel)
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -name "UserAuthentication" -Value 1

    - name: Create RDP user
      run: |
        # Créer un utilisateur pour RDP
        net user rdpuser "${{ secrets.RDP_PASSWORD }}" /add
        net localgroup administrators rdpuser /add
        net localgroup "Remote Desktop Users" rdpuser /add

    - name: Get system info
      run: |
        Write-Host "=== System Information ==="
        Get-ComputerInfo | Select-Object WindowsProductName, WindowsVersion, TotalPhysicalMemory
        Write-Host "=== Network Configuration ==="
        Get-NetAdapter | Where-Object Status -eq "Up" | Select-Object Name, InterfaceDescription, LinkSpeed

    - name: Start ngrok tunnel
      run: |
        Write-Host "Starting ngrok tunnel..."
        Start-Process -FilePath ".\ngrok.exe" -ArgumentList "tcp 3389 --log stdout" -NoNewWindow
        Start-Sleep -Seconds 10

    - name: Get ngrok tunnel info
      run: |
        try {
          $response = Invoke-RestMethod -Uri "http://localhost:4040/api/tunnels"
          $tunnel = $response.tunnels | Where-Object { $_.proto -eq "tcp" } | Select-Object -First 1
          if ($tunnel) {
            Write-Host "=== RDP CONNECTION INFO ==="
            Write-Host "Host: $($tunnel.public_url.Replace('tcp://', ''))"
            Write-Host "Username: rdpuser"
            Write-Host "Password: [PROTECTED - Check repository secrets]"
            Write-Host "=========================="
            
            # Sauvegarder les informations dans un fichier
            $connectionInfo = @"
=== RDP CONNECTION INFO ===
Host: $($tunnel.public_url.Replace('tcp://', ''))
Username: rdpuser
Password: [PROTECTED - Check repository secrets]
============================
"@
            $connectionInfo | Out-File -FilePath "rdp_connection_info.txt"
          } else {
            Write-Host "No TCP tunnel found"
          }
        } catch {
          Write-Host "Error getting tunnel info: $($_.Exception.Message)"
        }

    - name: Keep alive
      run: |
        $duration = [int]"${{ github.event.inputs.duration }}"
        Write-Host "Keeping session alive for $duration minutes..."
        Write-Host "RDP session is ready. Use the connection info above to connect."
        
        # Boucle pour maintenir la session active
        $endTime = (Get-Date).AddMinutes($duration)
        while ((Get-Date) -lt $endTime) {
          $remainingTime = $endTime - (Get-Date)
          Write-Host "Time remaining: $($remainingTime.ToString('hh\:mm\:ss'))"
          
          # Vérifier si ngrok est toujours actif
          try {
            $response = Invoke-RestMethod -Uri "http://localhost:4040/api/tunnels" -TimeoutSec 5
            $tunnel = $response.tunnels | Where-Object { $_.proto -eq "tcp" } | Select-Object -First 1
            if ($tunnel) {
              Write-Host "Tunnel active: $($tunnel.public_url)"
            }
          } catch {
            Write-Host "Warning: Unable to check tunnel status"
          }
          
          Start-Sleep -Seconds 60
        }
        
        Write-Host "Session expired. Terminating..."

    - name: Upload connection info
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: rdp-connection-info
        path: rdp_connection_info.txt
        retention-days: 1
